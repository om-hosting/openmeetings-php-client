<?php
/**
 * FileServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache OpenMeetings API
 *
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * FileServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation add
     *
     * @param  string $external_id external_id (required)
     * @param  string $external_type external_type (required)
     * @param  int $group_id group_id (required)
     * @param  string $hash hash (required)
     * @param  int $height height (required)
     * @param  int $id id (required)
     * @param  string $name name (required)
     * @param  int $owner_id owner_id (required)
     * @param  int $parent_id parent_id (required)
     * @param  int $room_id room_id (required)
     * @param  int $size size (required)
     * @param  string $type type (required)
     * @param  int $width width (required)
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileItemDTOWrapper
     */
    public function add($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
    {
        list($response) = $this->addWithHttpInfo($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid);
        return $response;
    }

    /**
     * Operation addWithHttpInfo
     *
     * @param  string $external_id (required)
     * @param  string $external_type (required)
     * @param  int $group_id (required)
     * @param  string $hash (required)
     * @param  int $height (required)
     * @param  int $id (required)
     * @param  string $name (required)
     * @param  int $owner_id (required)
     * @param  int $parent_id (required)
     * @param  int $room_id (required)
     * @param  int $size (required)
     * @param  string $type (required)
     * @param  int $width (required)
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileItemDTOWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWithHttpInfo($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->addRequest($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileItemDTOWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAsync
     *
     * 
     *
     * @param  string $external_id (required)
     * @param  string $external_type (required)
     * @param  int $group_id (required)
     * @param  string $hash (required)
     * @param  int $height (required)
     * @param  int $id (required)
     * @param  string $name (required)
     * @param  int $owner_id (required)
     * @param  int $parent_id (required)
     * @param  int $room_id (required)
     * @param  int $size (required)
     * @param  string $type (required)
     * @param  int $width (required)
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsync($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
    {
        return $this->addAsyncWithHttpInfo($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $external_id (required)
     * @param  string $external_type (required)
     * @param  int $group_id (required)
     * @param  string $hash (required)
     * @param  int $height (required)
     * @param  int $id (required)
     * @param  string $name (required)
     * @param  int $owner_id (required)
     * @param  int $parent_id (required)
     * @param  int $room_id (required)
     * @param  int $size (required)
     * @param  string $type (required)
     * @param  int $width (required)
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAsyncWithHttpInfo($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->addRequest($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'add'
     *
     * @param  string $external_id (required)
     * @param  string $external_type (required)
     * @param  int $group_id (required)
     * @param  string $hash (required)
     * @param  int $height (required)
     * @param  int $id (required)
     * @param  string $name (required)
     * @param  int $owner_id (required)
     * @param  int $parent_id (required)
     * @param  int $room_id (required)
     * @param  int $size (required)
     * @param  string $type (required)
     * @param  int $width (required)
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addRequest($external_id, $external_type, $group_id, $hash, $height, $id, $name, $owner_id, $parent_id, $room_id, $size, $type, $width, $sid)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling add'
            );
        }
        // verify the required parameter 'external_type' is set
        if ($external_type === null || (is_array($external_type) && count($external_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_type when calling add'
            );
        }
        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling add'
            );
        }
        // verify the required parameter 'hash' is set
        if ($hash === null || (is_array($hash) && count($hash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hash when calling add'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling add'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling add'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling add'
            );
        }
        // verify the required parameter 'owner_id' is set
        if ($owner_id === null || (is_array($owner_id) && count($owner_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner_id when calling add'
            );
        }
        // verify the required parameter 'parent_id' is set
        if ($parent_id === null || (is_array($parent_id) && count($parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id when calling add'
            );
        }
        // verify the required parameter 'room_id' is set
        if ($room_id === null || (is_array($room_id) && count($room_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $room_id when calling add'
            );
        }
        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling add'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling add'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null || (is_array($width) && count($width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling add'
            );
        }
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling add'
            );
        }

        $resourcePath = '/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }


        // form params
        if ($external_id !== null) {
            $formParams['externalId'] = ObjectSerializer::toFormValue($external_id);
        }
        // form params
        if ($external_type !== null) {
            $formParams['externalType'] = ObjectSerializer::toFormValue($external_type);
        }
        // form params
        if ($group_id !== null) {
            $formParams['groupId'] = ObjectSerializer::toFormValue($group_id);
        }
        // form params
        if ($hash !== null) {
            $formParams['hash'] = ObjectSerializer::toFormValue($hash);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($owner_id !== null) {
            $formParams['ownerId'] = ObjectSerializer::toFormValue($owner_id);
        }
        // form params
        if ($parent_id !== null) {
            $formParams['parentId'] = ObjectSerializer::toFormValue($parent_id);
        }
        // form params
        if ($room_id !== null) {
            $formParams['roomId'] = ObjectSerializer::toFormValue($room_id);
        }
        // form params
        if ($size !== null) {
            $formParams['size'] = ObjectSerializer::toFormValue($size);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delete1
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the id of the file or folder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ServiceResultWrapper
     */
    public function delete1($sid, $id)
    {
        list($response) = $this->delete1WithHttpInfo($sid, $id);
        return $response;
    }

    /**
     * Operation delete1WithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the id of the file or folder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ServiceResultWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function delete1WithHttpInfo($sid, $id)
    {
        $returnType = '\Swagger\Client\Model\ServiceResultWrapper';
        $request = $this->delete1Request($sid, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceResultWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation delete1Async
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delete1Async($sid, $id)
    {
        return $this->delete1AsyncWithHttpInfo($sid, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delete1AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delete1AsyncWithHttpInfo($sid, $id)
    {
        $returnType = '\Swagger\Client\Model\ServiceResultWrapper';
        $request = $this->delete1Request($sid, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete1'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function delete1Request($sid, $id)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling delete1'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling delete1'
            );
        }

        $resourcePath = '/file/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteExternal
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype the externalType (required)
     * @param  string $externalid the id of the file or folder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ServiceResultWrapper
     */
    public function deleteExternal($sid, $externaltype, $externalid)
    {
        list($response) = $this->deleteExternalWithHttpInfo($sid, $externaltype, $externalid);
        return $response;
    }

    /**
     * Operation deleteExternalWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype the externalType (required)
     * @param  string $externalid the id of the file or folder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ServiceResultWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalWithHttpInfo($sid, $externaltype, $externalid)
    {
        $returnType = '\Swagger\Client\Model\ServiceResultWrapper';
        $request = $this->deleteExternalRequest($sid, $externaltype, $externalid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ServiceResultWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExternalAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype the externalType (required)
     * @param  string $externalid the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalAsync($sid, $externaltype, $externalid)
    {
        return $this->deleteExternalAsyncWithHttpInfo($sid, $externaltype, $externalid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExternalAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype the externalType (required)
     * @param  string $externalid the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExternalAsyncWithHttpInfo($sid, $externaltype, $externalid)
    {
        $returnType = '\Swagger\Client\Model\ServiceResultWrapper';
        $request = $this->deleteExternalRequest($sid, $externaltype, $externalid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteExternal'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype the externalType (required)
     * @param  string $externalid the id of the file or folder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteExternalRequest($sid, $externaltype, $externalid)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling deleteExternal'
            );
        }
        // verify the required parameter 'externaltype' is set
        if ($externaltype === null || (is_array($externaltype) && count($externaltype) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externaltype when calling deleteExternal'
            );
        }
        // verify the required parameter 'externalid' is set
        if ($externalid === null || (is_array($externalid) && count($externalid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalid when calling deleteExternal'
            );
        }

        $resourcePath = '/file/{externaltype}/{externalid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($externaltype !== null) {
            $resourcePath = str_replace(
                '{' . 'externaltype' . '}',
                ObjectSerializer::toPathValue($externaltype),
                $resourcePath
            );
        }
        // path params
        if ($externalid !== null) {
            $resourcePath = str_replace(
                '{' . 'externalid' . '}',
                ObjectSerializer::toPathValue($externalid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllExternal
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype External type for file listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileItemDTOListWrapper
     */
    public function getAllExternal($sid, $externaltype)
    {
        list($response) = $this->getAllExternalWithHttpInfo($sid, $externaltype);
        return $response;
    }

    /**
     * Operation getAllExternalWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype External type for file listing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileItemDTOListWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllExternalWithHttpInfo($sid, $externaltype)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOListWrapper';
        $request = $this->getAllExternalRequest($sid, $externaltype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileItemDTOListWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllExternalAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype External type for file listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllExternalAsync($sid, $externaltype)
    {
        return $this->getAllExternalAsyncWithHttpInfo($sid, $externaltype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllExternalAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype External type for file listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllExternalAsyncWithHttpInfo($sid, $externaltype)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOListWrapper';
        $request = $this->getAllExternalRequest($sid, $externaltype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllExternal'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  string $externaltype External type for file listing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllExternalRequest($sid, $externaltype)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling getAllExternal'
            );
        }
        // verify the required parameter 'externaltype' is set
        if ($externaltype === null || (is_array($externaltype) && count($externaltype) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externaltype when calling getAllExternal'
            );
        }

        $resourcePath = '/file/{externaltype}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($externaltype !== null) {
            $resourcePath = str_replace(
                '{' . 'externaltype' . '}',
                ObjectSerializer::toPathValue($externaltype),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoom
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id ROOM Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileExplorerObjectWrapper
     */
    public function getRoom($sid, $id)
    {
        list($response) = $this->getRoomWithHttpInfo($sid, $id);
        return $response;
    }

    /**
     * Operation getRoomWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id ROOM Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileExplorerObjectWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomWithHttpInfo($sid, $id)
    {
        $returnType = '\Swagger\Client\Model\FileExplorerObjectWrapper';
        $request = $this->getRoomRequest($sid, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileExplorerObjectWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoomAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id ROOM Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoomAsync($sid, $id)
    {
        return $this->getRoomAsyncWithHttpInfo($sid, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoomAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id ROOM Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoomAsyncWithHttpInfo($sid, $id)
    {
        $returnType = '\Swagger\Client\Model\FileExplorerObjectWrapper';
        $request = $this->getRoomRequest($sid, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoom'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id ROOM Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRoomRequest($sid, $id)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling getRoom'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRoom'
            );
        }

        $resourcePath = '/file/room/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRoomByParent
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the parent folder id (required)
     * @param  int $parent the room id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileItemDTOListWrapper
     */
    public function getRoomByParent($sid, $id, $parent)
    {
        list($response) = $this->getRoomByParentWithHttpInfo($sid, $id, $parent);
        return $response;
    }

    /**
     * Operation getRoomByParentWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the parent folder id (required)
     * @param  int $parent the room id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileItemDTOListWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomByParentWithHttpInfo($sid, $id, $parent)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOListWrapper';
        $request = $this->getRoomByParentRequest($sid, $id, $parent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileItemDTOListWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRoomByParentAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the parent folder id (required)
     * @param  int $parent the room id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoomByParentAsync($sid, $id, $parent)
    {
        return $this->getRoomByParentAsyncWithHttpInfo($sid, $id, $parent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRoomByParentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the parent folder id (required)
     * @param  int $parent the room id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRoomByParentAsyncWithHttpInfo($sid, $id, $parent)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOListWrapper';
        $request = $this->getRoomByParentRequest($sid, $id, $parent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRoomByParent'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id the parent folder id (required)
     * @param  int $parent the room id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRoomByParentRequest($sid, $id, $parent)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling getRoomByParent'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRoomByParent'
            );
        }
        // verify the required parameter 'parent' is set
        if ($parent === null || (is_array($parent) && count($parent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent when calling getRoomByParent'
            );
        }

        $resourcePath = '/file/room/{id}/{parent}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($parent !== null) {
            $resourcePath = str_replace(
                '{' . 'parent' . '}',
                ObjectSerializer::toPathValue($parent),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation move
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id current file or folder id to be moved (required)
     * @param  int $roomid room this file need to be moved (required)
     * @param  int $parentid new parent folder id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileItemDTOWrapper
     */
    public function move($sid, $id, $roomid, $parentid)
    {
        list($response) = $this->moveWithHttpInfo($sid, $id, $roomid, $parentid);
        return $response;
    }

    /**
     * Operation moveWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id current file or folder id to be moved (required)
     * @param  int $roomid room this file need to be moved (required)
     * @param  int $parentid new parent folder id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileItemDTOWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveWithHttpInfo($sid, $id, $roomid, $parentid)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->moveRequest($sid, $id, $roomid, $parentid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileItemDTOWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id current file or folder id to be moved (required)
     * @param  int $roomid room this file need to be moved (required)
     * @param  int $parentid new parent folder id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveAsync($sid, $id, $roomid, $parentid)
    {
        return $this->moveAsyncWithHttpInfo($sid, $id, $roomid, $parentid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id current file or folder id to be moved (required)
     * @param  int $roomid room this file need to be moved (required)
     * @param  int $parentid new parent folder id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveAsyncWithHttpInfo($sid, $id, $roomid, $parentid)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->moveRequest($sid, $id, $roomid, $parentid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'move'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id current file or folder id to be moved (required)
     * @param  int $roomid room this file need to be moved (required)
     * @param  int $parentid new parent folder id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveRequest($sid, $id, $roomid, $parentid)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling move'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling move'
            );
        }
        // verify the required parameter 'roomid' is set
        if ($roomid === null || (is_array($roomid) && count($roomid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roomid when calling move'
            );
        }
        // verify the required parameter 'parentid' is set
        if ($parentid === null || (is_array($parentid) && count($parentid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentid when calling move'
            );
        }

        $resourcePath = '/file/move/{roomid}/{id}/{parentid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($roomid !== null) {
            $resourcePath = str_replace(
                '{' . 'roomid' . '}',
                ObjectSerializer::toPathValue($roomid),
                $resourcePath
            );
        }
        // path params
        if ($parentid !== null) {
            $resourcePath = str_replace(
                '{' . 'parentid' . '}',
                ObjectSerializer::toPathValue($parentid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rename
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id file or folder id (required)
     * @param  string $name new file or folder name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FileItemDTOWrapper
     */
    public function rename($sid, $id, $name)
    {
        list($response) = $this->renameWithHttpInfo($sid, $id, $name);
        return $response;
    }

    /**
     * Operation renameWithHttpInfo
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id file or folder id (required)
     * @param  string $name new file or folder name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FileItemDTOWrapper, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameWithHttpInfo($sid, $id, $name)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->renameRequest($sid, $id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FileItemDTOWrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renameAsync
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id file or folder id (required)
     * @param  string $name new file or folder name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameAsync($sid, $id, $name)
    {
        return $this->renameAsyncWithHttpInfo($sid, $id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renameAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id file or folder id (required)
     * @param  string $name new file or folder name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameAsyncWithHttpInfo($sid, $id, $name)
    {
        $returnType = '\Swagger\Client\Model\FileItemDTOWrapper';
        $request = $this->renameRequest($sid, $id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rename'
     *
     * @param  string $sid The SID of the User. This SID must be marked as Loggedin (required)
     * @param  int $id file or folder id (required)
     * @param  string $name new file or folder name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function renameRequest($sid, $id, $name)
    {
        // verify the required parameter 'sid' is set
        if ($sid === null || (is_array($sid) && count($sid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sid when calling rename'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling rename'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling rename'
            );
        }

        $resourcePath = '/file/rename/{id}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
