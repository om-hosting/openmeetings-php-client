<?php
/**
 * RoomDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache OpenMeetings API
 *
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RoomDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoomDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoomDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_recording' => 'bool',
'allow_user_questions' => 'bool',
'appointment' => 'bool',
'audio_only' => 'bool',
'capacity' => 'int',
'closed' => 'bool',
'comment' => 'string',
'confno' => 'string',
'demo' => 'bool',
'demo_time' => 'int',
'external_id' => 'string',
'external_type' => 'string',
'files' => '\Swagger\Client\Model\RoomFileDTO[]',
'hidden_elements' => 'string[]',
'id' => 'int',
'moderated' => 'bool',
'name' => 'string',
'public' => 'bool',
'redirect_url' => 'string',
'tag' => 'string',
'type' => 'string',
'wait_moderator' => 'bool',
'wait_recording' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_recording' => null,
'allow_user_questions' => null,
'appointment' => null,
'audio_only' => null,
'capacity' => 'int64',
'closed' => null,
'comment' => null,
'confno' => null,
'demo' => null,
'demo_time' => 'int32',
'external_id' => null,
'external_type' => null,
'files' => null,
'hidden_elements' => null,
'id' => 'int64',
'moderated' => null,
'name' => null,
'public' => null,
'redirect_url' => null,
'tag' => null,
'type' => null,
'wait_moderator' => null,
'wait_recording' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_recording' => 'allowRecording',
'allow_user_questions' => 'allowUserQuestions',
'appointment' => 'appointment',
'audio_only' => 'audioOnly',
'capacity' => 'capacity',
'closed' => 'closed',
'comment' => 'comment',
'confno' => 'confno',
'demo' => 'demo',
'demo_time' => 'demoTime',
'external_id' => 'externalId',
'external_type' => 'externalType',
'files' => 'files',
'hidden_elements' => 'hiddenElements',
'id' => 'id',
'moderated' => 'moderated',
'name' => 'name',
'public' => 'public',
'redirect_url' => 'redirectUrl',
'tag' => 'tag',
'type' => 'type',
'wait_moderator' => 'waitModerator',
'wait_recording' => 'waitRecording'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_recording' => 'setAllowRecording',
'allow_user_questions' => 'setAllowUserQuestions',
'appointment' => 'setAppointment',
'audio_only' => 'setAudioOnly',
'capacity' => 'setCapacity',
'closed' => 'setClosed',
'comment' => 'setComment',
'confno' => 'setConfno',
'demo' => 'setDemo',
'demo_time' => 'setDemoTime',
'external_id' => 'setExternalId',
'external_type' => 'setExternalType',
'files' => 'setFiles',
'hidden_elements' => 'setHiddenElements',
'id' => 'setId',
'moderated' => 'setModerated',
'name' => 'setName',
'public' => 'setPublic',
'redirect_url' => 'setRedirectUrl',
'tag' => 'setTag',
'type' => 'setType',
'wait_moderator' => 'setWaitModerator',
'wait_recording' => 'setWaitRecording'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_recording' => 'getAllowRecording',
'allow_user_questions' => 'getAllowUserQuestions',
'appointment' => 'getAppointment',
'audio_only' => 'getAudioOnly',
'capacity' => 'getCapacity',
'closed' => 'getClosed',
'comment' => 'getComment',
'confno' => 'getConfno',
'demo' => 'getDemo',
'demo_time' => 'getDemoTime',
'external_id' => 'getExternalId',
'external_type' => 'getExternalType',
'files' => 'getFiles',
'hidden_elements' => 'getHiddenElements',
'id' => 'getId',
'moderated' => 'getModerated',
'name' => 'getName',
'public' => 'getPublic',
'redirect_url' => 'getRedirectUrl',
'tag' => 'getTag',
'type' => 'getType',
'wait_moderator' => 'getWaitModerator',
'wait_recording' => 'getWaitRecording'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HIDDEN_ELEMENTS_TOP_BAR = 'TOP_BAR';
const HIDDEN_ELEMENTS_CHAT = 'CHAT';
const HIDDEN_ELEMENTS_ACTIVITIES = 'ACTIVITIES';
const HIDDEN_ELEMENTS_FILES = 'FILES';
const HIDDEN_ELEMENTS_ACTION_MENU = 'ACTION_MENU';
const HIDDEN_ELEMENTS_POLL_MENU = 'POLL_MENU';
const HIDDEN_ELEMENTS_SCREEN_SHARING = 'SCREEN_SHARING';
const HIDDEN_ELEMENTS_WHITEBOARD = 'WHITEBOARD';
const HIDDEN_ELEMENTS_MICROPHONE_STATUS = 'MICROPHONE_STATUS';
const HIDDEN_ELEMENTS_USER_COUNT = 'USER_COUNT';
const TYPE_CONFERENCE = 'CONFERENCE';
const TYPE_PRESENTATION = 'PRESENTATION';
const TYPE_INTERVIEW = 'INTERVIEW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHiddenElementsAllowableValues()
    {
        return [
            self::HIDDEN_ELEMENTS_TOP_BAR,
self::HIDDEN_ELEMENTS_CHAT,
self::HIDDEN_ELEMENTS_ACTIVITIES,
self::HIDDEN_ELEMENTS_FILES,
self::HIDDEN_ELEMENTS_ACTION_MENU,
self::HIDDEN_ELEMENTS_POLL_MENU,
self::HIDDEN_ELEMENTS_SCREEN_SHARING,
self::HIDDEN_ELEMENTS_WHITEBOARD,
self::HIDDEN_ELEMENTS_MICROPHONE_STATUS,
self::HIDDEN_ELEMENTS_USER_COUNT,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CONFERENCE,
self::TYPE_PRESENTATION,
self::TYPE_INTERVIEW,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_recording'] = isset($data['allow_recording']) ? $data['allow_recording'] : null;
        $this->container['allow_user_questions'] = isset($data['allow_user_questions']) ? $data['allow_user_questions'] : null;
        $this->container['appointment'] = isset($data['appointment']) ? $data['appointment'] : null;
        $this->container['audio_only'] = isset($data['audio_only']) ? $data['audio_only'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['confno'] = isset($data['confno']) ? $data['confno'] : null;
        $this->container['demo'] = isset($data['demo']) ? $data['demo'] : null;
        $this->container['demo_time'] = isset($data['demo_time']) ? $data['demo_time'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['external_type'] = isset($data['external_type']) ? $data['external_type'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['hidden_elements'] = isset($data['hidden_elements']) ? $data['hidden_elements'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['moderated'] = isset($data['moderated']) ? $data['moderated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['wait_moderator'] = isset($data['wait_moderator']) ? $data['wait_moderator'] : null;
        $this->container['wait_recording'] = isset($data['wait_recording']) ? $data['wait_recording'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_recording
     *
     * @return bool
     */
    public function getAllowRecording()
    {
        return $this->container['allow_recording'];
    }

    /**
     * Sets allow_recording
     *
     * @param bool $allow_recording allow_recording
     *
     * @return $this
     */
    public function setAllowRecording($allow_recording)
    {
        $this->container['allow_recording'] = $allow_recording;

        return $this;
    }

    /**
     * Gets allow_user_questions
     *
     * @return bool
     */
    public function getAllowUserQuestions()
    {
        return $this->container['allow_user_questions'];
    }

    /**
     * Sets allow_user_questions
     *
     * @param bool $allow_user_questions allow_user_questions
     *
     * @return $this
     */
    public function setAllowUserQuestions($allow_user_questions)
    {
        $this->container['allow_user_questions'] = $allow_user_questions;

        return $this;
    }

    /**
     * Gets appointment
     *
     * @return bool
     */
    public function getAppointment()
    {
        return $this->container['appointment'];
    }

    /**
     * Sets appointment
     *
     * @param bool $appointment appointment
     *
     * @return $this
     */
    public function setAppointment($appointment)
    {
        $this->container['appointment'] = $appointment;

        return $this;
    }

    /**
     * Gets audio_only
     *
     * @return bool
     */
    public function getAudioOnly()
    {
        return $this->container['audio_only'];
    }

    /**
     * Sets audio_only
     *
     * @param bool $audio_only audio_only
     *
     * @return $this
     */
    public function setAudioOnly($audio_only)
    {
        $this->container['audio_only'] = $audio_only;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int $capacity capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets confno
     *
     * @return string
     */
    public function getConfno()
    {
        return $this->container['confno'];
    }

    /**
     * Sets confno
     *
     * @param string $confno confno
     *
     * @return $this
     */
    public function setConfno($confno)
    {
        $this->container['confno'] = $confno;

        return $this;
    }

    /**
     * Gets demo
     *
     * @return bool
     */
    public function getDemo()
    {
        return $this->container['demo'];
    }

    /**
     * Sets demo
     *
     * @param bool $demo demo
     *
     * @return $this
     */
    public function setDemo($demo)
    {
        $this->container['demo'] = $demo;

        return $this;
    }

    /**
     * Gets demo_time
     *
     * @return int
     */
    public function getDemoTime()
    {
        return $this->container['demo_time'];
    }

    /**
     * Sets demo_time
     *
     * @param int $demo_time demo_time
     *
     * @return $this
     */
    public function setDemoTime($demo_time)
    {
        $this->container['demo_time'] = $demo_time;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_type
     *
     * @return string
     */
    public function getExternalType()
    {
        return $this->container['external_type'];
    }

    /**
     * Sets external_type
     *
     * @param string $external_type external_type
     *
     * @return $this
     */
    public function setExternalType($external_type)
    {
        $this->container['external_type'] = $external_type;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Swagger\Client\Model\RoomFileDTO[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Swagger\Client\Model\RoomFileDTO[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets hidden_elements
     *
     * @return string[]
     */
    public function getHiddenElements()
    {
        return $this->container['hidden_elements'];
    }

    /**
     * Sets hidden_elements
     *
     * @param string[] $hidden_elements hidden_elements
     *
     * @return $this
     */
    public function setHiddenElements($hidden_elements)
    {
        $allowedValues = $this->getHiddenElementsAllowableValues();
        if (!is_null($hidden_elements) && array_diff($hidden_elements, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'hidden_elements', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hidden_elements'] = $hidden_elements;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets moderated
     *
     * @return bool
     */
    public function getModerated()
    {
        return $this->container['moderated'];
    }

    /**
     * Sets moderated
     *
     * @param bool $moderated moderated
     *
     * @return $this
     */
    public function setModerated($moderated)
    {
        $this->container['moderated'] = $moderated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets wait_moderator
     *
     * @return bool
     */
    public function getWaitModerator()
    {
        return $this->container['wait_moderator'];
    }

    /**
     * Sets wait_moderator
     *
     * @param bool $wait_moderator wait_moderator
     *
     * @return $this
     */
    public function setWaitModerator($wait_moderator)
    {
        $this->container['wait_moderator'] = $wait_moderator;

        return $this;
    }

    /**
     * Gets wait_recording
     *
     * @return bool
     */
    public function getWaitRecording()
    {
        return $this->container['wait_recording'];
    }

    /**
     * Sets wait_recording
     *
     * @param bool $wait_recording wait_recording
     *
     * @return $this
     */
    public function setWaitRecording($wait_recording)
    {
        $this->container['wait_recording'] = $wait_recording;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
