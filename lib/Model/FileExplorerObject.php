<?php
/**
 * FileExplorerObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache OpenMeetings API
 *
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FileExplorerObject Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileExplorerObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileExplorerObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'room_home' => '\Swagger\Client\Model\FileItemDTO[]',
'room_home_size' => 'int',
'user_home' => '\Swagger\Client\Model\FileItemDTO[]',
'user_home_size' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'room_home' => null,
'room_home_size' => 'int64',
'user_home' => null,
'user_home_size' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'room_home' => 'roomHome',
'room_home_size' => 'roomHomeSize',
'user_home' => 'userHome',
'user_home_size' => 'userHomeSize'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'room_home' => 'setRoomHome',
'room_home_size' => 'setRoomHomeSize',
'user_home' => 'setUserHome',
'user_home_size' => 'setUserHomeSize'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'room_home' => 'getRoomHome',
'room_home_size' => 'getRoomHomeSize',
'user_home' => 'getUserHome',
'user_home_size' => 'getUserHomeSize'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['room_home'] = isset($data['room_home']) ? $data['room_home'] : null;
        $this->container['room_home_size'] = isset($data['room_home_size']) ? $data['room_home_size'] : null;
        $this->container['user_home'] = isset($data['user_home']) ? $data['user_home'] : null;
        $this->container['user_home_size'] = isset($data['user_home_size']) ? $data['user_home_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets room_home
     *
     * @return \Swagger\Client\Model\FileItemDTO[]
     */
    public function getRoomHome()
    {
        return $this->container['room_home'];
    }

    /**
     * Sets room_home
     *
     * @param \Swagger\Client\Model\FileItemDTO[] $room_home room_home
     *
     * @return $this
     */
    public function setRoomHome($room_home)
    {
        $this->container['room_home'] = $room_home;

        return $this;
    }

    /**
     * Gets room_home_size
     *
     * @return int
     */
    public function getRoomHomeSize()
    {
        return $this->container['room_home_size'];
    }

    /**
     * Sets room_home_size
     *
     * @param int $room_home_size room_home_size
     *
     * @return $this
     */
    public function setRoomHomeSize($room_home_size)
    {
        $this->container['room_home_size'] = $room_home_size;

        return $this;
    }

    /**
     * Gets user_home
     *
     * @return \Swagger\Client\Model\FileItemDTO[]
     */
    public function getUserHome()
    {
        return $this->container['user_home'];
    }

    /**
     * Sets user_home
     *
     * @param \Swagger\Client\Model\FileItemDTO[] $user_home user_home
     *
     * @return $this
     */
    public function setUserHome($user_home)
    {
        $this->container['user_home'] = $user_home;

        return $this;
    }

    /**
     * Gets user_home_size
     *
     * @return int
     */
    public function getUserHomeSize()
    {
        return $this->container['user_home_size'];
    }

    /**
     * Sets user_home_size
     *
     * @param int $user_home_size user_home_size
     *
     * @return $this
     */
    public function setUserHomeSize($user_home_size)
    {
        $this->container['user_home_size'] = $user_home_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
