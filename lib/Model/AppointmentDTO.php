<?php
/**
 * AppointmentDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache OpenMeetings API
 *
 * Integration API enables to connect to an OpenMeetings instance, eg for generating users, create links to directly access conference rooms.<br/><br/>         <b>It is mainly designed for Server2Server integration, for example to integrate into your website, CMS or 3rd party application</b><br/><br/>         For examples how to use the Rest API see <a href=\"https://openmeetings.apache.org/RestAPISample.html\" target=\"_BLANK\">https://openmeetings.apache.org/RestAPISample.html</a>.<br/><br/>         Community contributed modules for using this API include for example:         <ul>          <li><a href=\"https://openmeetings.apache.org/RestAPISample.html#how-to-integrate-using-nodejs\" target=\"_BLANK\"> Node.js module for using API</a></li>         </ul>         Other community plugins using this API for Moodle, SugarCRM, Drupal, Joomla can be found in the Configuration>Plugins section at <a href=\"https://openmeetings.apache.org\" target=\"_BLANK\">https://openmeetings.apache.org</a>
 *
 * OpenAPI spec version: 7.0.0-SNAPSHOT
 * Contact: dev@openmeetings.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AppointmentDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppointmentDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppointmentDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connected_event' => 'bool',
'deleted' => 'bool',
'description' => 'string',
'end' => '\DateTime',
'ical_id' => 'string',
'id' => 'int',
'inserted' => '\DateTime',
'language_id' => 'int',
'location' => 'string',
'meeting_members' => '\Swagger\Client\Model\MeetingMemberDTO[]',
'owner' => '\Swagger\Client\Model\UserDTO',
'password' => 'string',
'password_protected' => 'bool',
'reminder' => 'string',
'reminder_email_send' => 'bool',
'room' => '\Swagger\Client\Model\RoomDTO',
'start' => '\DateTime',
'title' => 'string',
'updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connected_event' => null,
'deleted' => null,
'description' => null,
'end' => 'date-time',
'ical_id' => null,
'id' => 'int64',
'inserted' => 'date-time',
'language_id' => 'int64',
'location' => null,
'meeting_members' => null,
'owner' => null,
'password' => null,
'password_protected' => null,
'reminder' => null,
'reminder_email_send' => null,
'room' => null,
'start' => 'date-time',
'title' => null,
'updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connected_event' => 'connectedEvent',
'deleted' => 'deleted',
'description' => 'description',
'end' => 'end',
'ical_id' => 'icalId',
'id' => 'id',
'inserted' => 'inserted',
'language_id' => 'languageId',
'location' => 'location',
'meeting_members' => 'meetingMembers',
'owner' => 'owner',
'password' => 'password',
'password_protected' => 'passwordProtected',
'reminder' => 'reminder',
'reminder_email_send' => 'reminderEmailSend',
'room' => 'room',
'start' => 'start',
'title' => 'title',
'updated' => 'updated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connected_event' => 'setConnectedEvent',
'deleted' => 'setDeleted',
'description' => 'setDescription',
'end' => 'setEnd',
'ical_id' => 'setIcalId',
'id' => 'setId',
'inserted' => 'setInserted',
'language_id' => 'setLanguageId',
'location' => 'setLocation',
'meeting_members' => 'setMeetingMembers',
'owner' => 'setOwner',
'password' => 'setPassword',
'password_protected' => 'setPasswordProtected',
'reminder' => 'setReminder',
'reminder_email_send' => 'setReminderEmailSend',
'room' => 'setRoom',
'start' => 'setStart',
'title' => 'setTitle',
'updated' => 'setUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connected_event' => 'getConnectedEvent',
'deleted' => 'getDeleted',
'description' => 'getDescription',
'end' => 'getEnd',
'ical_id' => 'getIcalId',
'id' => 'getId',
'inserted' => 'getInserted',
'language_id' => 'getLanguageId',
'location' => 'getLocation',
'meeting_members' => 'getMeetingMembers',
'owner' => 'getOwner',
'password' => 'getPassword',
'password_protected' => 'getPasswordProtected',
'reminder' => 'getReminder',
'reminder_email_send' => 'getReminderEmailSend',
'room' => 'getRoom',
'start' => 'getStart',
'title' => 'getTitle',
'updated' => 'getUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REMINDER_NONE = 'NONE';
const REMINDER_EMAIL = 'EMAIL';
const REMINDER_ICAL = 'ICAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReminderAllowableValues()
    {
        return [
            self::REMINDER_NONE,
self::REMINDER_EMAIL,
self::REMINDER_ICAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connected_event'] = isset($data['connected_event']) ? $data['connected_event'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['ical_id'] = isset($data['ical_id']) ? $data['ical_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['meeting_members'] = isset($data['meeting_members']) ? $data['meeting_members'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['password_protected'] = isset($data['password_protected']) ? $data['password_protected'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['reminder_email_send'] = isset($data['reminder_email_send']) ? $data['reminder_email_send'] : null;
        $this->container['room'] = isset($data['room']) ? $data['room'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReminderAllowableValues();
        if (!is_null($this->container['reminder']) && !in_array($this->container['reminder'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reminder', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connected_event
     *
     * @return bool
     */
    public function getConnectedEvent()
    {
        return $this->container['connected_event'];
    }

    /**
     * Sets connected_event
     *
     * @param bool $connected_event connected_event
     *
     * @return $this
     */
    public function setConnectedEvent($connected_event)
    {
        $this->container['connected_event'] = $connected_event;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets ical_id
     *
     * @return string
     */
    public function getIcalId()
    {
        return $this->container['ical_id'];
    }

    /**
     * Sets ical_id
     *
     * @param string $ical_id ical_id
     *
     * @return $this
     */
    public function setIcalId($ical_id)
    {
        $this->container['ical_id'] = $ical_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inserted
     *
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     *
     * @param \DateTime $inserted inserted
     *
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return int
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param int $language_id language_id
     *
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets meeting_members
     *
     * @return \Swagger\Client\Model\MeetingMemberDTO[]
     */
    public function getMeetingMembers()
    {
        return $this->container['meeting_members'];
    }

    /**
     * Sets meeting_members
     *
     * @param \Swagger\Client\Model\MeetingMemberDTO[] $meeting_members meeting_members
     *
     * @return $this
     */
    public function setMeetingMembers($meeting_members)
    {
        $this->container['meeting_members'] = $meeting_members;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Swagger\Client\Model\UserDTO
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Swagger\Client\Model\UserDTO $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_protected
     *
     * @return bool
     */
    public function getPasswordProtected()
    {
        return $this->container['password_protected'];
    }

    /**
     * Sets password_protected
     *
     * @param bool $password_protected password_protected
     *
     * @return $this
     */
    public function setPasswordProtected($password_protected)
    {
        $this->container['password_protected'] = $password_protected;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return string
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param string $reminder reminder
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $allowedValues = $this->getReminderAllowableValues();
        if (!is_null($reminder) && !in_array($reminder, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reminder', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets reminder_email_send
     *
     * @return bool
     */
    public function getReminderEmailSend()
    {
        return $this->container['reminder_email_send'];
    }

    /**
     * Sets reminder_email_send
     *
     * @param bool $reminder_email_send reminder_email_send
     *
     * @return $this
     */
    public function setReminderEmailSend($reminder_email_send)
    {
        $this->container['reminder_email_send'] = $reminder_email_send;

        return $this;
    }

    /**
     * Gets room
     *
     * @return \Swagger\Client\Model\RoomDTO
     */
    public function getRoom()
    {
        return $this->container['room'];
    }

    /**
     * Sets room
     *
     * @param \Swagger\Client\Model\RoomDTO $room room
     *
     * @return $this
     */
    public function setRoom($room)
    {
        $this->container['room'] = $room;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
